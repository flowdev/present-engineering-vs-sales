# Micro Services - The End of Software Design

28 Sep 2020
Tags: software-design, micro-services, Golang, spaghetti-cutter

Ole Bulbuk, available
https://flowdev.github.io/static/present/2020/soft-design/present.html
@flowdev_org (Twitter)
@ole108 (Gopher Slack)
https://github.com/flowdev/spaghetti-cutter
Attributions for images:
All Gophers have been taken from Maria Letta's excellent 'free-gophers-pack'.
Uber service graph: © Adam Gluck, Uber Engineering (from blog post: 'Introducing Domain-Oriented Microservice Architecture')
Monzo service graph: © Tim Anderson, The Register (from blog post: 'How does Monzo keep 1,600 microservices spinning? Go, clean code, and a strong team')
Broken cup: © Abd Basith | Flickr (CC BY 2.0)


## Who's Ole?
.background images/go.png

- 25 years of professional sofware development

: NEXT: Background: The Monolith


## Who's Ole?
.background images/go.png

- 25 years of professional sofware development
- Almost 20 years of Java

: NEXT: Background: The Monolith


## Who's Ole?
.background images/go.png

- 25 years of professional sofware development
- Almost 20 years of Java
- 5 years of Go

: NEXT: Background: The Monolith


## Who's Ole?
.background images/go.png

- 25 years of professional sofware development
- Almost 20 years of Java
- 5 years of Go
- 3 years co-organizer of Berlin Go meetup

: NEXT: Background: The Monolith


## Who's Ole?
.background images/go.png

- 25 years of professional sofware development
- Almost 20 years of Java
- 5 years of Go
- 3 years co-organizer of Berlin Go meetup
- Often worked as software architect or similar

: NEXT: Background: The Monolith


## Who's Ole?
.background images/go.png

- 25 years of professional sofware development
- Almost 20 years of Java
- 5 years of Go
- 3 years co-organizer of Berlin Go meetup
- Often worked as software architect or similar
- Looking for lead or principal engineer position

: NEXT: Background: The Monolith


## The Old Days: The Monolith
.background images/old.png

- 1 system - 1 deployable unit

: NEXT: Example class diagrams


## The Old Days: The Monolith
.background images/old.png

- 1 system - 1 deployable unit
- Ops insisted on this

: NEXT: Example class diagrams


## The Old Days: The Monolith
.background images/old.png

- 1 system - 1 deployable unit
- Ops insisted on this
- Never questioned

: NEXT: Example class diagrams


## The Old Days: The Monolith
.background images/old.png

- 1 system - 1 deployable unit
- Ops insisted on this
- Never questioned
- Systems grew without bounds

: NEXT: Example class diagrams


## The Old Days: The Monolith
.background images/old.png

- 1 system - 1 deployable unit
- Ops insisted on this
- Never questioned
- Systems grew without bounds
- Usually becoming a big ball of mud

: NEXT: Example class diagrams


## Typical Class Diagram of Monolith

.image images/uber-services.png 800 _

: Some nice parts at the outer edges.
: Crazy mess in the middle.
: It is just too simple to reuse something quickly.


## Typical Class Diagram of Monolith 2

.image images/monzo-services.jpg 800 _

: Still nice parts at the outer edges.
: Even more crazy mess in the middle.
: NEXT: Software Design


## Software Design Tries to Keep the Mess at Bay

> Software design ... "all the activity involved in
> conceptualizing, framing, implementing, commissioning,
> and ultimately modifying complex systems"

Wikipedia


## Software Design Has Been a Reputable Discipline

.image images/cpp-soft-design.jpg 800 _

: I owned a copy of this book many years ago and liked it very much.

: NEXT: Java!


## Java is Bad for Software Design
.background images/java.png

- Java allows circular dependencies between classes

: NEXT: Tools for Software Design


## Java is Bad for Software Design
.background images/java.png

- Java allows circular dependencies between classes
- Java allows circular dependencies between packages

: NEXT: Tools for Software Design


## Java is Bad for Software Design
.background images/java.png

- Java allows circular dependencies between classes
- Java allows circular dependencies between packages
- Java neither encourages nor prevents circular dependencies between projects

: NEXT: Tools for Software Design


## Tools for Software Design
.background images/tool.png

IDE's contain a lot of tools for code analysis and refactoring:

- Structural analysis

: NEXT: Micro Services


## Tools for Software Design
.background images/tool.png

IDE's contain a lot of tools for code analysis and refactoring:

- Structural analysis
- Renaming classes, methods, variables...

: NEXT: Micro Services


## Tools for Software Design
.background images/tool.png

IDE's contain a lot of tools for code analysis and refactoring:

- Structural analysis
- Renaming classes, methods, variables...
- Moving classes, methods

: NEXT: Micro Services


## Tools for Software Design
.background images/tool.png

IDE's contain a lot of tools for code analysis and refactoring:

- Structural analysis
- Renaming classes, methods, variables...
- Moving classes, methods
- Extract methods, split up classes

: NEXT: Micro Services


## Tools for Software Design
.background images/tool.png

IDE's contain a lot of tools for code analysis and refactoring:

- Structural analysis
- Renaming classes, methods, variables...
- Moving classes, methods
- Extract methods, split up classes
- Big companies build their own specialized tools

: NEXT: Micro Services


## Now: Micro Services
.background images/baby.png

- 1 system - 1,000 deployable units


## Now: Micro Services
.background images/baby.png

- 1 system - 1,000 deployable units
- DevOps + cloud insist on this


## Now: Micro Services
.background images/baby.png

- 1 system - 1,000 deployable units
- DevOps + cloud insist on this
- Never questioned?


## Now: Micro Services
.background images/baby.png

- 1 system - 1,000 deployable units
- DevOps + cloud insist on this
- Never questioned?
- Systems grow without bounds


## Now: Micro Services
.background images/baby.png

- 1 system - 1,000 deployable units
- DevOps + cloud insist on this
- Never questioned?
- Systems grow without bounds
- Usually becoming a spaghetti architecture


## Service Diagram from Uber

.image images/uber-services.png 800 _

.caption © Adam Gluck, Uber Engineering (from blog post: 'Introducing Domain-Oriented Microservice Architecture')
: Anything not resembling a strict hierarchy adds complexity and is hard to understand.
: It is just too simple to listen to another topic.


## Service Diagram from Monzo

.image images/monzo-services.jpg 800 _

.caption © Tim Anderson, The Register (from blog post: 'How does Monzo keep 1,600 microservices spinning? Go, clean code, and a strong team')


## Downsides of Spaghetti Architecture
.background images/cry.png

- Updating a dependency for 1,000 microservices is hard


## Downsides of Spaghetti Architecture
.background images/cry.png

- Updating a dependency for 1,000 microservices is hard
- Moving functionality to other services is tedious


## Downsides of Spaghetti Architecture
.background images/cry.png

- Updating a dependency for 1,000 microservices is hard
- Moving functionality to other services is tedious
- Cutting services in a different way is almost impossible


## Go is Great for Software Design
.background images/go.png

- Go has been engineered with scalability in mind


## Go is Great for Software Design
.background images/go.png

- Go has been engineered with scalability in mind
- Packages are made for encapsulating functionality


## Go is Great for Software Design
.background images/go.png

- Go has been engineered with scalability in mind
- Packages are made for encapsulating functionality
- Dependency cycles between packages aren't possible


## Go is Great for Software Design
.background images/go.png

- Go has been engineered with scalability in mind
- Packages are made for encapsulating functionality
- Dependency cycles between packages aren't possible
- Tooling for preventing other unwanted dependencies between packages is simple


## spaghetti-cutter - Win The Fight Against Spaghetti Code

.image images/spaghetti-cutter.jpg 600 _


## spaghetti-cutter - What To Expect
.background images/alarm.png

[https://github.com/flowdev/spaghetti-cutter](https://github.com/flowdev/spaghetti-cutter)

- Open source, documented and ready to use


## spaghetti-cutter - What To Expect
.background images/alarm.png

[https://github.com/flowdev/spaghetti-cutter](https://github.com/flowdev/spaghetti-cutter)

- Open source, documented and ready to use
- Command line tool for CI/CD pipelines (and dev machines)


## spaghetti-cutter - What To Expect
.background images/alarm.png

[https://github.com/flowdev/spaghetti-cutter](https://github.com/flowdev/spaghetti-cutter)

- Open source, documented and ready to use
- Command line tool for CI/CD pipelines (and dev machines)
- Prevents Go spaghetti code with error messages and return code


## spaghetti-cutter - What To Expect
.background images/alarm.png

[https://github.com/flowdev/spaghetti-cutter](https://github.com/flowdev/spaghetti-cutter)

- Open source, documented and ready to use
- Command line tool for CI/CD pipelines (and dev machines)
- Prevents Go spaghetti code with error messages and return code
- Configuration gives good overview of project: documentation


## spaghetti-cutter - Options And Arguments

.code code/spaghetti-cutter_help.txt

: NEXT: Path config


## spaghetti-cutter - Path Configuration

- Simple path: 'db'

: `**` only allowed at the end.
: Technically possible: `**` like `*` but matches `/`, too.


## spaghetti-cutter - Path Configuration

- Simple path: 'db'
- Nested path: 'x/tool'

: `**` only allowed at the end.
: Technically possible: `**` like `*` but matches `/`, too.


## spaghetti-cutter - Path Configuration

- Simple path: 'db'
- Nested path: 'x/tool'
- Simple star: 'x/\*', '\*/db', '\*/special/\*'

: `**` only allowed at the end.
: Technically possible: `**` like `*` but matches `/`, too.


## spaghetti-cutter - Path Configuration

- Simple path: 'db'
- Nested path: 'x/tool'
- Simple star: 'x/\*', '\*/db', '\*/special/\*'
- Simple star for test packages: 'domain*' includes 'domain_test'

: `**` only allowed at the end.
: Technically possible: `**` like `*` but matches `/`, too.


## spaghetti-cutter - Path Configuration

- Simple path: 'db'
- Nested path: 'x/tool'
- Simple star: 'x/\*', '\*/db', '\*/special/\*'
- Simple star for test packages: 'domain*' includes 'domain_test'
- Double star: 'db/**'

: `**` only allowed at the end.
: Technically possible: `**` like `*` but matches `/`, too.


## spaghetti-cutter - General Configuration

.code code/config-general.hjson


## spaghetti-cutter - Allow Configuration

.code code/config-allow.hjson


## spaghetti-cutter - Restrict Configuration

.code code/config-deny.hjson


## spaghetti-cutter - Output

.code code/spaghetti-cutter_log.txt


## Conclusions
.background images/learned.png

- Software design is dead in micro service land


## Conclusions
.background images/learned.png

- Software design is dead in micro service land
- But you pay a very high price for it


## Conclusions
.background images/learned.png

- Software design is dead in micro service land
- But you pay a very high price for it
- Reasonably sized services could be a great compromise


## Conclusions
.background images/learned.png

- Software design is dead in micro service land
- But you pay a very high price for it
- Reasonably sized services could be a great compromise
- Tools like the 'spaghetti-cutter' help preventing spaghetti code


## Please Enjoy Your Pasta In Nice Bites

.image images/spaghetti-cutter.jpg 600 _

