# How to Land a Good Go Job
or what to watch out for so your new team member won't break the service
28 Mar 2020
Tags: job, back-end, web-API, Golang

Ole Bulbuk
Senior Go Engineer, solarisBank AG
https://flowdev.github.io/
@flowdev_org
Attributions for images:

: Who is looking for job?
: Who is hiring?
: Leaning more towards looking for a job


## What is Go used for?

: Roughly in chronological order
: What segment do hiring engineers come from?


## Advertisement bidding

- Low latency (ca. 50ms) request handling |
- High concurrency |
- Scalability matters |
- Knowledge about the world held in RAM |
- Web API |
- Performance critical stuff behind interfaces |
- Many engineers love high performance stuff |
- Enough rooms for normal devs |
- Few, small companies |

: In the old days they were very prominent in the community, not anymore
: Only somewhat interesting


## Cloud technologies

- Go for system programming |
- Command line tools |
- Low level programming |
- Low latency services |
- Highly skilled engineers |
- Few, small companies |

: You will need to show some knowledge about cloud tech
: Blog posts, talks, etc.


## FinTech

- Use Go as modern Java |
- Mistakes can cost a lot of money |
- Web APIs |
- Rooms for devs who test carefully |
- Quite some companies from small to medium |

: Can be good start


## Blockchain technologiy

- Distributed services |
- Very abstract stuff |
- Highly skilled engineers |
- Few, small companies |

: You should show some block chain knowledge to land job
: Blog posts, talks, etc.


## Diverse companies building services

- Use Go as modern Java |
- Web APIs |
- Lots of room for devs with diverse backgrounds |
- Many companies from small to huge |
- Fastest growing segment |

: Almost any backgound can be interesting for some company
: Biggest part of the job market
: Easiest start


## Job market take away

- Web APIs |
- Business software |
- Growing with more adoption of Go |


## Typical job interviews

- Coding test |
- Brain teasers |
- Algorithms and data structures |
- Only the top x% of engineers work for us |

: over-engineering; old, shitty code base
: the top x% wouldn't stay here anyway
: if you go here you might not be part of the top x%
: but you can be useful for 99% of companies


## What to know about Web APIs???

: search terms at the top of each page
: please ecosia them later


## HTTP

**Search terms:** \
stateless HTTP, REST (REpresentational State Transfer), \
HTTP methods (GET, POST, DELETE, PUT, PATCH), \
**idempotence**, gRPC, GraphQL (nice to know)

- No Web without HTTP |
- If the client doesn't get the response back it will try again: idempotence |


## Authentication

**Search terms:** \
Cookie + server side session, **JWT (JSON Web Token)**, OAuth 2.0

- Authentication: **Who** is it? |
- You really need to know about JWT |
- Offer only 1 good cipher for JWT |
- OAuth 2.0 is nice to know |

: If everybody can claim to be the admin your service is broken
: Usually handled in central library or proxy


## Authorization

**Search terms:** \
Role based authorization (RBAC)

- Authorization: **What** is allowed? |
- RBAC is king and many companies use some derivative |

: If everybody gets admin permission your service is broken
: Usually handled in central library or proxy


## Database

**Search terms:** \
SQL, RDBMS (Relational DataBase Management System), SQL injection, \
DB migration, DB transactions, DB lock levels

- Heart of every business software |
- Long term storage -> hard to change |
- Types: relational, document, key-value, graph |
- Use cases: business data, archiving, caching, ... |
- RDBMS (Relational DataBase Management System) is still the most important |


## 3rd Party API

**Search terms:** \
service resilience, time-out, circuit breaker, \
retry with randomized exponential back-off

- No direct influence on third party! |
- Can stop the whole system |
- Error handling is paramount |
- Call to 3rd party in the context of a transaction |


## Testing 

**Search terms:** \
test pyramid, test funnel, stress tests

- Deployment with confidence |
- A good test suite is the basis for every refactoring |
- Good tests enable and support changes |

: Testing is a big topic esp. for FinTechs


## Code Quality

**Search terms:** \
surviving software dependencies, clean code

- Maintainability |
- Simplicity counts |
- Effects can be seen only long-term |

: Clean code can be endless topic


## DevOps

**Search terms:** \
Docker, Kubernetes, Observability/Telemetry, \
Prometheus (monitoring), Jaeger (tracing)

- Many problems today arise between systems |
- Being able to debug inter service problems is very important skill |

: Good DevOps people can currently earn more money than pure Go engineers
: Some codebases have more complexity in their YAML files than in their Go files
: The power of micro services...
